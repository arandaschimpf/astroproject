<style>
  .timer-container {
    width: 470px;
    display: block;
    margin: 100px auto;
    position: relative;
  }

  .timer-text {
    font-size: 11.5rem;
    color: rgb(210, 210, 210);
  }

  .timer-button {
    width: 450px;
    height: 450px;
    border-radius: 50%;
    margin: 0;
    background-color: rgba(0, 0, 0, 0.4);
    background-color: rgba(0, 0, 0, 1);
    cursor: pointer;
    z-index: 20;
    transition: all 1s linear;
  }

  .outer {
    height: 470px;
    width: 470px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
  }

  .inner {
    height: 450px;
    width: 450px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.1);
    background-color: rgba(255, 255, 255, 0);
  }
  
  .overlay-text {
    font-size: 12rem;
    color: var(--white);
    text-align: center;
  }

  .timer-button:hover .overlay {
    opacity: 1;
  }

  .timer-button:hover .timer-text {
    opacity: 0;
    transition: all 1s linear;
  }

  circle {
    fill: none;
    stroke: url(#GradientColor);
    stroke-width: 10px;
    stroke-dasharray: 1445;
    stroke-dashoffset: 0;
  }

  svg {
    position: absolute;
    width: 470px;
    height: 470px;
    top: 0;
    left: 0;
  }

  .overlay {
    position: absolute;
    top: 10px;
    left: 10px;
    width: 450px;
    height: 450px;
    background: linear-gradient(
      to bottom right,
      rgba(203, 95, 224, 0.7),
      rgba(129, 32, 255, 0.7)
    );
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    opacity: 0;
    transition: all 1s;
  }
</style>

<div class="timer-container">
  <div class="outer">
    <button class="timer-button inner">
      <h3 class="timer-text">05:00</h3>
      <div class="overlay">
        <p class="overlay-text">START</p>
      </div>
    </button>
  </div>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    version="1.1"
    width="470px"
    height="470px"
  >
    <defs>
      <linearGradient id="GradientColor">
        <stop offset="0%" stop-color="#DA22FF"></stop>

        <stop offset="100%" stop-color="#9733EE"></stop>
      </linearGradient>
    </defs>
    <circle id="timerBar" cx="235" cy="235" r="230" stroke-linecap="round"
    ></circle>
  </svg>
</div>

<script>
  const button = document.querySelector(".timer-button");
  const timerText = document.querySelector(".timer-text");
  const overlayText = document.querySelector(".overlay-text");
  const timerBar = document.getElementById("timerBar");
  const circumference = 1445;
  let counting = false;
  let defaultTime = 5;
  let interval: NodeJS.Timeout | undefined;
  if (document.querySelector(".inner")) {
    console.log(document.querySelector(".inner")?.clientWidth);
  }

  if (timerText) {
    timerText.innerHTML = `${defaultTime.toString().padStart(2, "0")}:00`;
  }
  button?.addEventListener("click", () => {
    if (!counting) {
      counting = true;
      if (overlayText) {
        overlayText.innerHTML = "STOP";
      }

      let count = 60 * 5;
      interval = setInterval(() => {
        count--;
        const minutes = Math.floor(count / 60)
          .toString()
          .padStart(2, "0");
        const seconds = (count % 60).toString().padStart(2, "0");
        const text = `${minutes}:${seconds}`;
        if (timerText) {
          timerText.innerHTML = text;
        }
        if (timerBar) {
          const porcentage = (count / (defaultTime * 60)) * 100;
          const progress = circumference - (circumference * porcentage) / 100;
          console.log(count, porcentage, progress);
          timerBar.style.strokeDashoffset = `${progress}`;
          console.log();
        }
        if (count <= 0) {
          clearInterval(interval);
        }
      }, 1000);
    } else {
      if (overlayText) {
        counting = false;
        // Configure the overlay's text to start
        overlayText.innerHTML = "START";
        // Restart the timer text to the initial time
        if (timerText) {
          timerText.innerHTML = `${defaultTime.toString().padStart(2, "0")}:00`;
        }
        // Fill the timer progress bar again
        if (timerBar) {
          timerBar.style.strokeDashoffset = `${0}`;
        }
        // Stops the timer
        clearInterval(interval);
      }
    }
  });
</script>
